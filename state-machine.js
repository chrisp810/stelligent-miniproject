/*
 *  state-machine.js
 *  State machine controlling the steps to provision a stack with OpsWorks and
 *    deploy an application
 *  State machine calls out to EC2, IAM, or OpsWorks functions and awaits a
 *    callback as each step completes, moving on to the next state.
 *
 *  States/tasks are:
 *    Create a stack using OpsWorks Stacks
 *    Create a layer on the stack
 *    Create an application (pointing to the GitHub URL of a basic node.js app)
 *    Create and launch an EC2 instance of the stack using OpsWorks
 *    Deploy the application using Chef recipes stored on S3
 */
var opsworksFn = require('./opsworks');
var ec2Fn = require('./ec2');
var _ = require('underscore')._;

// These are the states we go through, in order
var STATES = {
	START: 'start',
	HAS_SECURITY_GROUP: 'has_group',
	HAS_ROLES: 'has_roles',
	HAS_STACK: 'has_stack',
	HAS_LAYER: 'has_layer',
	HAS_APP: 'has_app',
	HAS_INSTANCE: 'has_instance',
	INSTANCE_ONLINE: 'instance_online',
	DEPLOYED_APP: 'deployed_app'
};

// changeState function saves any new IDs generated by the AWS SDK calls
var changeState = function(new_state, param_changes) {
        _.extend(IDS, param_changes);
        moveToState(new_state);
};

module.exports = {
	changeState: changeState,
	STATES: STATES
};

var IDS = { stack: '', layer: '', app: '', instance: '' };

// This is the logic on moving from state to state
//   Call an EC2 or OpsWorks function and tell it the next state.  When
//   it completes, it calls back with the new state, and we move on.
var moveToState = function(new_state) {
	if (new_state == module.exports.STATES.START) {
		ec2Fn.createSecurityGroup(IDS,changeState,STATES.HAS_SECURITY_GROUP);
	} else if (new_state == module.exports.STATES.HAS_SECURITY_GROUP) {
		ec2Fn.getRoles(IDS,changeState,STATES.HAS_ROLES);
	} else if (new_state == module.exports.STATES.HAS_ROLES) {
		opsworksFn.createStack(IDS,changeState,STATES.HAS_STACK);
	} else if (new_state == module.exports.STATES.HAS_STACK) {
		opsworksFn.createLayer(IDS,changeState,STATES.HAS_LAYER);
	} else if (new_state == module.exports.STATES.HAS_LAYER) {
		opsworksFn.createApp(IDS,changeState,STATES.HAS_APP);
	} else if (new_state == module.exports.STATES.HAS_APP) {
		opsworksFn.createInstance(IDS,changeState,STATES.HAS_INSTANCE);
	} else if (new_state == module.exports.STATES.HAS_INSTANCE) {
		opsworksFn.startInstance(IDS,changeState,STATES.INSTANCE_ONLINE);
	} else if (new_state == module.exports.STATES.INSTANCE_ONLINE) {
		opsworksFn.deployApp(IDS,changeState,STATES.DEPLOYED_APP);
	} else if (new_state == module.exports.STATES.DEPLOYED_APP) {
		opsworksFn.showAppDetails(IDS);
	} else {
		// This is if the callback is passed a null next state (error)
		console.log('Aborting due to errors');
	}
};
